# Define stages for pipeline
stages:
  - install
  - test
  - build
  - deploy

# Setup default image for job
default:
  image: node:18-alpine

# Variable for job
variables:
  FF_USE_FASTZIP: "true" # Fastzip is a performant archiver for cache/artifact archiving and extraction
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_NAME: $CI_PROJECT_NAME
  CONTAINER_EXPOSE_PORT: 80
  APP_DEFAULT_RUNNING_PORT: 3000

# YAML anchors
.node_modules-cache: &node_modules-cache # Cache node_modules
  key:
    files:
      - yarn.lock
  paths:
    - node_modules
  policy: pull

.run-on-merge-request: &run-on-merge-request # Run job on Merge Requests
  if: "$CI_MERGE_REQUEST_IID"

.run-on-default-branch: &run-on-default-branch # Run job on main branch
  if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

.run-on-product-tag: &run-on-product-tag # Run job when create tag on main branch
  if: "$CI_COMMIT_TAG =~ /^v\\d+.\\d+.\\d+/"

# Jobs
install_dependencies:
  stage: install
  cache:
    - <<: *node_modules-cache
      policy: pull-push # We override the policy
  rules:
    - <<: *run-on-merge-request
    - <<: *run-on-default-branch
  script:
    - yarn bootstrap --cache-folder .yarn

code-test:
  stage: test
  cache:
    - <<: *node_modules-cache
  rules:
    - <<: *run-on-merge-request
    - <<: *run-on-default-branch
  script:
    - yarn lint
    - yarn prettier
    - yarn check-types

unit-test:
  stage: test
  cache:
    - <<: *node_modules-cache
  rules:
    - <<: *run-on-merge-request
    - <<: *run-on-default-branch
  script:
    - yarn test

build:
  stage: build
  cache:
    - <<: *node_modules-cache
  rules:
    - <<: *run-on-default-branch
  script:
    - yarn build

build-docker:
  stage: deploy
  image: docker
  services:
    - docker:dind
  before_script:
    - docker info
  rules:
    - <<: *run-on-product-tag
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

deploy:
  image: alpine:latest
  stage: deploy
  rules:
    - <<: *run-on-product-tag
  before_script:
    - echo $CI_PROJECT_NAME
    - echo CI_PROJECT_PATH
  script:
    - chmod og= $PRODUCT_ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $PRODUCT_ID_RSA -o StrictHostKeyChecking=no $PRODUCT_SERVER_USER@$PRODUCT_SERVER_IP "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -i $PRODUCT_ID_RSA -o StrictHostKeyChecking=no $PRODUCT_SERVER_USER@$PRODUCT_SERVER_IP "docker pull $IMAGE_TAG"
    - ssh -i $PRODUCT_ID_RSA -o StrictHostKeyChecking=no $PRODUCT_SERVER_USER@$PRODUCT_SERVER_IP "docker container rm -f $CONTAINER_NAME || true"
    - ssh -i $PRODUCT_ID_RSA -o StrictHostKeyChecking=no $PRODUCT_SERVER_USER@$PRODUCT_SERVER_IP "docker run -d -p $CONTAINER_EXPOSE_PORT:$APP_DEFAULT_RUNNING_PORT --name $CONTAINER_NAME $IMAGE_TAG"
  environment:
    name: production
    url: http://172.16.4.112
